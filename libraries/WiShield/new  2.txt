/*
 * Socket App
 *
 * A simple socket application example using the WiShield 1.0
 */

#include <WiShield.h>
#include <EEPROMex.h>
extern "C" {
    #include "socketapp.h"
    #include "uip.h"
    #include <string.h>
}

#define WIRELESS_MODE_INFRA	1
#define WIRELESS_MODE_ADHOC	2

char tobesent[20];
char invalidtag[]={"invalid tag"};
char existTag[]={"Tag already exist"};
char NOTexistTag[]={"Tag doesn't exist"};
int emptyTag[4]={255,255,255,255};
int iTAG[8];
int TAG[4];
int i=0;
int len=0;
int invalidcard=1;
// Wireless configuration parameters ----------------------------------------
unsigned char local_ip[]     = {192,168,1,100};	// IP address of WiShield
unsigned char gateway_ip[]   = {192,168,1,1};	// router or gateway IP address
unsigned char subnet_mask[]  = {255,255,255,0};	// subnet mask for the local network
char ssid[]                  = {"pcg01"};		// max 32 bytes

unsigned char security_type = 0;	// 0 - open; 1 - WEP; 2 - WPA; 3 - WPA2

// WPA/WPA2 passphrase
const prog_char security_passphrase[] PROGMEM = {"1nor83r4opla9l2"};	// max 64 characters

// WEP 128-bit keys
// sample HEX keys
prog_uchar wep_keys[] PROGMEM = {	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,	// Key 0
									0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00,	// Key 1
									0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00,	// Key 2
									0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00	// Key 3
								};

// setup the wireless mode
// infrastructure - connect to AP
// adhoc - connect to another WiFi device
unsigned char wireless_mode = WIRELESS_MODE_INFRA;

unsigned char ssid_len;
unsigned char security_passphrase_len;
//---------------------------------------------------------------------------

void setup()
{        
	WiFi.init();
        Serial.begin(57600);
}

void loop()
{

	WiFi.run();
}


extern "C" {
   /*
 * Declaration of the protosocket function that handles the connection
 * (defined at the end of the code).
 */
static int handle_connection(struct socket_app_state *s);
/*---------------------------------------------------------------------------*/
/*
 * The initialization function. We must explicitly call this function
 * from the system initialization code, some time after uip_init() is
 * called.
 */
void socket_app_init(void)
{
  /* We start to listen for connections on TCP port 1000. */
  uip_listen(HTONS(1000));
}
/*---------------------------------------------------------------------------*/
/*
 * In socketapp.h we have defined the UIP_APPCALL macro to
 * socket_app_appcall so that this function is uIP's application
 * function. This function is called whenever an uIP event occurs
 * (e.g. when a new connection is established, new data arrives, sent
 * data is acknowledged, data needs to be retransmitted, etc.).
 */
void socket_app_appcall(void)
{
  /*
   * The uip_conn structure has a field called "appstate" that holds
   * the application state of the connection. We make a pointer to
   * this to access it easier.
   */
  struct socket_app_state *s = &(uip_conn->appstate);

  /*
   * If a new connection was just established, we should initialize
   * the protosocket in our applications' state structure.
   */
  if(uip_connected()) {
    PSOCK_INIT(&s->p, s->inputbuffer, sizeof(s->inputbuffer));
  }


  /*
   * Finally, we run the protosocket function that actually handles
   * the communication. We pass it a pointer to the application state
   * of the current connection.
   */
  handle_connection(s);
}
/*---------------------------------------------------------------------------*/
/*
 * This is the protosocket function that handles the communication. A
 * protosocket function must always return an int, but must never
 * explicitly return - all return statements are hidden in the PSOCK
 * macros.
 */
static int handle_connection(struct socket_app_state *s)
{
  PSOCK_BEGIN(&s->p);
  /*
  Serial.write("Esteiles kati?");
  if (Serial.available()){
    i=0;
    while(Serial.available()){
      tobesent[i]=Serial.read();
      i=i+1;
    }
    Serial.write(tobesent);

  }
  */

  PSOCK_SEND_STR(&s->p, "Hello. Give me card No with case.\n");
  PSOCK_READTO(&s->p,'\n');
     // check at inputbuffer for the upcoming data. Check if valid and seperate them.
  switch (s->inputbuffer[0]){
     case 'a':
      Serial.print('\n');
      len=0;
      invalidcard=0;
      for(int i=0; i<8; i++){
        iTAG[i]=SerialReadHexDigit(s->inputbuffer[i+1]);
        if(iTAG[i]<0){
          memset(s->inputbuffer, 0x00, sizeof(s->inputbuffer)); //thetei 0x00 se olo to inputbuffer;
          memcpy(s->inputbuffer, invalidtag, sizeof(invalidtag) );
          invalidcard=1;
          Serial.print('\n');
          Serial.print(invalidtag);
          Serial.print('\n');
          break;
        }
        if(i==1||i==3||i==5||i==7){
          int k= 16*iTAG[i-1];
          int l=iTAG[i];
          TAG[len]=k+l;
          len++;
         }}
        if (invalidcard == 0){
          int f = EEPROMcheck(TAG);  //ean iparxei idi i karta stin eeprom\
          if (f>0){
            memset(s->inputbuffer, 0x00, sizeof(s->inputbuffer)); //thetei 0x00 se olo to inputbuffer;
            memcpy(s->inputbuffer, existTag, sizeof(existTag) );
          }else{
            int g = EEPROMcheck(emptyTag);
            EEPROM.writeByte(g,TAG[0]);
            EEPROM.writeByte(g+1,TAG[1]);
            EEPROM.writeByte(g+2,TAG[2]);
            EEPROM.writeByte(g+3,TAG[3]);
		}
          Serial.print('\n');
          Serial.print(TAG[0],HEX);
          Serial.print(TAG[1],HEX);
          Serial.print(TAG[2],HEX);
          Serial.print(TAG[3],HEX);
          Serial.print('\n');
        }
      break;
      case 'b':
      Serial.print('\n');
      len=0;
      invalidcard=0;
      for(int i=0; i<8; i++){
        iTAG[i]=SerialReadHexDigit(s->inputbuffer[i+1]);
        if(iTAG[i]<0){
          memset(s->inputbuffer, 0x00, sizeof(s->inputbuffer)); //thetei 0x00 se olo to inputbuffer;
          memcpy(s->inputbuffer, invalidtag, sizeof(invalidtag) );
          invalidcard=1;
          break;
        }
        if(i==1||i==3||i==5||i==7){
          int k= 16*iTAG[i-1];
          int l=iTAG[i];
          TAG[len]=k+l;
          len++;
         }}
        if (invalidcard == 0){
          int f = EEPROMcheck(TAG);
          if(f<0){
            memset(s->inputbuffer, 0x00, sizeof(s->inputbuffer)); //thetei 0x00 se olo to inputbuffer;
            memcpy(s->inputbuffer, NOTexistTag, sizeof(NOTexistTag));
          }
          else{
            EEPROM.writeByte(f,TAG[0]);
            EEPROM.writeByte(f+1,TAG[1]);
            EEPROM.writeByte(f+2,TAG[2]);
            EEPROM.writeByte(f+3,TAG[3]);
            
            Serial.print('\n');
            Serial.print("The following bytes were written in the followin adress: ");
            Serial.print(f);
            Serial.write(EEPROM.readByte(f));
            Serial.write(EEPROM.readByte(f+1));
            Serial.write(EEPROM.readByte(f+2));
            Serial.write(EEPROM.readByte(f+2));
          }
          Serial.print('\n');
          Serial.print(TAG[0],HEX);
          Serial.print(TAG[1],HEX);
          Serial.print(TAG[2],HEX);
          Serial.print(TAG[3],HEX);
          Serial.print('\n');
        }
      break;
     default:
       break;
  }
  
  PSOCK_SEND_STR(&s->p, "Hello ");
  PSOCK_SEND(&s->p,tobesent,sizeof(tobesent));
  PSOCK_SEND_STR(&s->p, s->inputbuffer);
  char* pinakas[20];// = {s->inputbuffer}; // or use of 
  memcpy( pinakas, s->name, sizeof(s->name) );
  
  memset(s->inputbuffer, 0x00, sizeof(s->inputbuffer)); //thetei 0x00 se olo to inputbuffer;
  /*
  delay(5000);
  while(Serial.available()){
  s->onoma = Serial.read();
  PSOCK_SEND_STR(&s->p,s->onoma);
  }
*/
//  PSOCK_CLOSE(&s->p);      //edo looparei sinexeia ean to baloume se comment.
  PSOCK_SEND_STR(&s->p, s->inputbuffer);
  PSOCK_END(&s->p);
}
}
/*
void udpapp_appcall(void){
}
void udpapp_init(void){
}*/

int SerialReadHexDigit(char a){
  byte c = byte(a);
  if (c >= '0' && c <= '9') {
    return c - '0';
  } else if (c >= 'a' && c <= 'f') {
    return c - 'a' + 10;
  } else if (c >= 'A' && c <= 'F') {
    return c - 'A' + 10;
  } else {
    return -1; // getting here is bad: it means the character was invalid
  }
}

  int EEPROMcheck(int array[4]){
    b=-1;
    for (int c=0; c<1024; c=c+4){
      if (array[0] == EEPROM.read(c) ){
        if (array[1] == EEPROM.read(c+1)){
          if (array[2] == EEPROM.read(c+2)){
            if (array[3] == EEPROM.read(c+3)){
              b=c;
              break;
            }}}}}
    return b;
  }
